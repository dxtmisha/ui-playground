import { ComponentsItems } from './ComponentsItems'
import { PropertiesFile } from '../properties/PropertiesFile'

import {
  COMPONENTS_DIR,
  COMPONENTS_STYLE,
  COMPONENTS_STYLE_INIT
} from '../../../types/components'

/**
 * Class for creating a connection file for the split.<br>
 * Класс для создания файла подключения спила.
 */
export class ComponentsStyle {
  /**
   * Constructor
   * @param items object for working with the list of components /<br>объект для работы со списком компонентов
   */
  // eslint-disable-next-line no-useless-constructor
  constructor (
    protected readonly items: ComponentsItems
  ) {
  }

  /**
   * Creates a common style file.<br>
   * Создает общий файл стилей.
   */
  make (): this {
    const main = this.items.getDesignMain()
    const designs = process.env.DESIGNS?.split(',')

    if (designs) {
      const data: string[] = [
        '// This file is generated by a script, do not edit.',
        '// Этот файл генерируется скриптом, не редактировать.',
        ''
      ]
      const init: string[] = [...data]

      designs.forEach(item => {
        data.push(`@import "./../${item}/${item === main ? 'main' : 'init'}";`)
        init.push(`@import "./../${item}/init";`)
      })

      PropertiesFile.write(
        [COMPONENTS_DIR],
        COMPONENTS_STYLE,
        data.join('\r\n'),
        'scss'
      )

      PropertiesFile.write(
        [COMPONENTS_DIR],
        COMPONENTS_STYLE_INIT,
        init.join('\r\n'),
        'scss'
      )
    }

    return this
  }
}
