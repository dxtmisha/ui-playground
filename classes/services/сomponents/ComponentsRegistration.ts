import { PropertiesFile } from '../properties/PropertiesFile.ts'

import { ComponentsItems } from './ComponentsItems.ts'

import {
  COMPONENTS_DIR,
  COMPONENTS_REGISTRATION,
  COMPONENTS_REGISTRATION_FUNCTION
} from '../../../types/components.ts'

/**
 * A class for creating a connection file for all components.<br>
 * Класс для создания файла подключения всех компонентов.
 */
export class ComponentsRegistration {
  /**
   * Constructor
   * @param items object for working with the list of components /<br>объект для работы со списком компонентов
   */
  // eslint-disable-next-line no-useless-constructor
  constructor (
    protected readonly items: ComponentsItems
  ) {
  }

  /**
   * Creating a file for connecting components.<br>
   * Создание файла для подключения компонентов.
   */
  make (): this {
    const components = this.items.getComponentList()

    const imports: string[] = []
    const list: string[] = []

    components.forEach(({
      design,
      codeFull,
      dir
    }) => {
      imports.push(`import ${codeFull} from './../${design}/${dir}/${codeFull}.vue'`)
      list.push(`  app.component('${codeFull}', ${codeFull})`)
    })

    PropertiesFile.write(
      [COMPONENTS_DIR],
      COMPONENTS_REGISTRATION,
      [
        '// This file is generated by a script, do not edit.',
        '// Этот файл генерируется скриптом, не редактировать.',
        '',
        'import { type Component, createApp } from \'vue\'',
        '',
        ...imports,
        '',
        `export function ${COMPONENTS_REGISTRATION_FUNCTION}<A extends Component> (App: A) {`,
        '  const app = createApp(App)',
        '',
        ...list,
        '',
        '  return app',
        '}',
        ''
      ].join('\r\n'),
      'ts'
    )

    return this
  }
}
