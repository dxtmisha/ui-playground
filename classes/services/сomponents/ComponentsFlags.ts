import { toCamelCaseFirst, toKebabCase } from '../../../functions/string.ts'

import { PropertiesFile } from '../properties/PropertiesFile.ts'

import { ComponentsItems } from './ComponentsItems.ts'

import {
  COMPONENTS_DIR,
  COMPONENTS_DIR_FLAGS,
  COMPONENTS_FLAGS
} from '../../../types/components.ts'

/**
 * Class for generating a file to connect flags.<br>
 * Класс для формирования файла для подключения флагов.
 */
export class ComponentsFlags {
  /**
   * Constructor
   * @param items object for working with the list of components /<br>объект для работы со списком компонентов
   */
  // eslint-disable-next-line no-useless-constructor
  constructor (
    protected readonly items: ComponentsItems
  ) {
  }

  make (): void {
    const list = this.getList()

    const imports: string[] = []
    const data: string[] = []

    list.forEach(flag => {
      const name = toCamelCaseFirst(flag.replace('.', '-'))
      imports.push(`import ${name} from '../media/flags/${flag}'`)
      data.push(`  Icons.add('flag-${toKebabCase(name.replace('Svg', ''))}', ${name})`)
    })

    PropertiesFile.write(
      [COMPONENTS_DIR],
      COMPONENTS_FLAGS,
      [
        '// This file is generated by a script, do not edit.',
        '// Этот файл генерируется скриптом, не редактировать.',
        '',
        'import { Icons } from \'./../classes/Icons\'',
        '',
        ...imports,
        '',
        'export const makeFlagsGlobal = (): void => {',
        ...data,
        '}',
        ''
      ].join('\r\n'),
      'ts'
    )
  }

  private getList (): string[] {
    return PropertiesFile.readDirRecursive(COMPONENTS_DIR_FLAGS)
  }
}
