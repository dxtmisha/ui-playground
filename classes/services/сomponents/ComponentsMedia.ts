import { PropertiesFile } from '../properties/PropertiesFile.ts'

import { ComponentsItems } from './ComponentsItems.ts'

import { FILE_ICONS } from '../../../types/property.ts'
import {
  COMPONENTS_DIR,
  COMPONENTS_FLAGS,
  COMPONENTS_MEDIA
} from '../../../types/components.ts'

/**
 * Class for generating a file to connect flags.<br>
 * Класс для формирования файла для подключения флагов.
 */
export class ComponentsMedia {
  /**
   * Constructor
   * @param items object for working with the list of components /<br>объект для работы со списком компонентов
   */
  // eslint-disable-next-line no-useless-constructor
  constructor (
    protected readonly items: ComponentsItems
  ) {
  }

  make (): void {
    PropertiesFile.write(
      [COMPONENTS_DIR],
      COMPONENTS_MEDIA,
      [
        '// This file is generated by a script, do not edit.',
        '// Этот файл генерируется скриптом, не редактировать.',
        '',
        'export const makeMediaGlobal = async (): Promise<void> => {',
        `  ;(await import('./${COMPONENTS_FLAGS}.ts')).makeFlagsGlobal()`,
        ...this.initIcon(),
        '}',
        ''
      ].join('\r\n'),
      'ts'
    )
  }

  initIcon (): string[] {
    const designs = this.items.getDesigns()
    const data: string[] = []

    designs.forEach(design => {
      const path = [design, `${FILE_ICONS}.ts`]

      if (PropertiesFile.is(path)) {
        data.push(`  ;(await import('./../${PropertiesFile.joinPath(path)}')).makeIconsGlobal()`)
      }
    })

    return data
  }
}
