@use "sass:list";
@use "sass:map";
@use "sass:meta";

$designsProperties: () !default;

/// List of types that belong to additions and are used for separating class names
///
/// Список типов, которые относятся к дополнениям и используются для разделения имени класса
$designsAuxiliary: (
        'selector',
        'virtual'
) !default;

/// List of types that belong to basic properties and do not extend the class of a property
///
/// Список типов, которые относятся к базовым свойствам и не расширяют класс свойства
$designsBasic: (
        'var',
        'property',
        'scss'
) !default;

$designsClassName: 'class' !default;

@import "../rules";

@import "propertiesAnimate";
@import "propertiesClass";
@import "propertiesMedia";
@import "propertiesProperty";
@import "propertiesSelector";
@import "propertiesVar";
@import "propertiesVirtual";

/// Getting a property by its key
///
/// Получение свойства по его ключу
/// @param {String} $index
/// @return {Map}
@function getProperties($index: null) {
  @if $index == null {
    @return $designsProperties;
  } @else {
    $data: $designsProperties;

    @each $key in strToList($index) {
      @if ($data != null) {
        $data: getMapItem(getMapItem($data, 'value', $data), $key);
      }
    }

    @return $data;
  }
}

/// Getting a list of properties by its key
///
/// Получение списка свойств по его ключу
/// @param {String} $index
/// @return {Map}
@function getPropertiesValue($index: null) {
  $data: getProperties($index);
  @return getMapItem($data, 'value', $data);
}

/// Mixin for generating a class
///
/// Миксин для генерации класса
/// @param {Map} $property
@mixin initClass($property) {
  @if ($property != null) {
    $name: map.get($property, 'name');
    $value: map.get($property, 'value');

    #{'.'}#{$name} {
      $designsClassName: & !global;
      @include initProperties($value);
    }
  }
}

/// Entry point - mixin for starting processing an array with properties
///
/// Точка входа - миксин для начала обработки массива со свойствами
/// @param {Map} $properties
/// @param {Map} $parent
/// @param {String} $this
@mixin initProperties(
  $properties,
  $parent: null,
  $this: null
) {
  @each $index, $property in $properties {
    @if (__isSelector($parent) and not __isSelector($property)) {
      @include __toBySelector($property, $this);
    } @else {
      @include __to($property);
    }
  }
}

/// Checks whether the type of property is basic
///
/// Проверяет, является ли тип свойства базовым
/// @param {Map} $property
/// @return {Boolean}
@function __isBasic($property) {
  @return list.index($designsBasic, map.get($property, 'type')) != null;
}

/// Checks whether the ancestor is of the type 'addition'
///
/// Проверяет, является ли предок типа дополнения
/// @param {Map} $parent
/// @return {Boolean}
@function __isSelector($parent) {
  @return $parent and list.index($designsAuxiliary, map.get($parent, 'type')) != null;
}

/// Processing a property
///
/// Обработка свойства
/// @param {Map} $property
@mixin __to($property) {
  $this: &;

  @include __toGo($property) using($value) {
    @include initProperties($value, $property, $this);
  }
}

/// Processing properties, selecting action based on type
///
/// Обработка свойств, выбор действия в зависимости от типа
/// @param {Map} $property
@mixin __toGo($property) {
  $value: map.get($property, 'value');
  $type: map.get($property, 'type');

  @if ($type =='var') {
    @include initVar($property);
  } @else if ($type =='property') {
    @include initProperty($property);
  } @else if ($type =='selector') {
    @include initSelector($property, $designsClassName) {
      @content($value);
    }
  } @else if ($type =='state') {
    @include initState($property) {
      @content($value);
    }
  } @else if ($type =='virtual') {
    @include initVirtual($property) {
      @content($value);
    }
  } @else if ($type =='subclass' or $type =='class') {
    @include initSubclass($property) {
      @content($value);
    }
  } @else if (
          $type =='media' or
          $type =='media-max'
  ) {
    @include initMedia($property) {
      @content($value);
    }
  } @else if ($type =='animate') {
    @include initAnimate($property) using($item) {
      @content($item);
    }
  } @else if ($type =='scss') {
    @include initScss($property) {
      @content($value);
    }
  } @else if ($type =='root') {
    @include initAtRoot($property) {
      @content($value);
    }
  }
}

/// Processing an auxiliary element
///
/// Обработка вспомогательного элемента
/// @param {Map} $property
/// @param {List} $this
@mixin __toBySelector($property, $this) {
  @if (__isBasic($property)) {
    @include __to($property);
  } @else {
    #{$this} {
      @include __to($property);
    }
  }
}
