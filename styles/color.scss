@use "sass:meta";
@use "sass:string";

$designsDesign: 'design' !default;
$designsPalette: () !default;
$designsShade: () !default;

/// Checks if a value is a color
///
/// Проверяет, является ли значение цветом
/// @param {Color} $color
/// @return {Boolean}
@function isColorRbgOrVar($color) {
  @return meta.type-of($color) == color or (
    $color != 'none' and
    $color != 'transparent' and
    $color != 'initial' and
    $color != 'inherit'
  )
}

/// Checks if a color is suitable for the palette
///
/// Проверяет, является ли цвет подходящим для палитры
/// @param {Color} $color
/// @return {Boolean}
@function isPalette($color) {
  @return string.index($color, '--') != null
}

/// Returns color value by its code
///
/// Возвращает значение цвета по его коду
/// @param {Color} $color
/// @param {Number} $opacity
/// @param {Boolean} $gradient if true, returns as an image / если true, возвращает в виде изображения
/// @return {String}
@function getColor(
  $color,
  $opacity: 1,
  $gradient: false
) {
  $value: $color;

  @if (meta.type-of($color) == color) {
    $value: rgba(#{toColorRbg($color)}, #{$opacity});
  }

  @if $gradient {
    @return toGradient($value);
  } @else {
    @return $value;
  }
}

/// Checking if a color is part of the list of used colors
///
/// Проверка, является ли цвет частью списка используемых цветов
/// @param {Color} $color
/// @return {String}
@function getColorByPalette($color) {
  @each $name, $value in $designsPalette {
    @if (string.index($color, #{$name}#{')'}) != null) {
      @return $value;
    }
  }

  @return null;
}

/// Checking if a color is part of the list of saturation levels
///
/// Проверка, является ли цвет частью списка насыщенности
/// @param {Color} $color
/// @return {String}
@function getColorByShade($color) {
  @each $design, $list in $designsShade {
    @if ($design == $designsDesign) {
      @each $value in $list {
        @if (string.index($color, #{'-'}#{$value}#{')'}) != null) {
          @return #{'--'}#{$designsDesign}#{'-palette-'}#{$value};
        }
      }
    }
  }

  @return null;
}

/// Returns value for palette
///
/// Возвращает значение для палитры
/// @param {Color} $color
/// @return {String}
@function getPalette($color) {
  @if (isPalette($color)) {
    $palette: getColorByPalette($color);

    @if ($palette != null) {
      @return getPaletteItem($palette, $color);
    } @else {
      $shade: getColorByShade($color);

      @if ($shade) {
        @return #{var(#{$shade}, #{toColorRbg($color)})};
      }
    }
  }
  @return #{var(--sys-palette, #{toColorRbg($color)})}
}

/// Returns value for palette
///
/// Возвращает значение для поиск нужный цветов
/// @param {List} $palette
/// @param {Color|String} $color
/// @return {String}
@function getPaletteItem($palette, $color) {
  $value: #{toColorRbg($color)};

  @if (meta.type-of($palette) == list) {
    @each $name in $palette {
      $value: #{var(#{$name}, #{$value})}
    }

    @return $value;
  } @else {
    @return #{var(#{$palette}, #{$value})};
  }
}

/// Color conversion to rgb type
///
/// Преобразование цвета в тип RGB
/// @param {Color} $color
/// @return {String}
@function toColorRbg($color) {
  @if (meta.type-of($color) == color) {
    @return red($color) + ', ' + green($color) + ', ' + blue($color);
  } @else {
    @return $color;
  }
}

/// Conversion of color into images for working with background-image
///
/// Преобразование цвета в изображения для работы с background-image
/// @param {Color} $color
/// @return {String}
@function toGradient($color) {
  @return linear-gradient(0deg, #{$color}, #{$color});
}

@mixin paletteGlobal {
  --sys-background-opacity: 1;
  --sys-gradient-opacity: 1;
}

/* Palette */

@mixin palette($color) {
  --sys-palette: #{toColorRbg($color)};
}

@mixin paletteColor($color) {
  --sys-palette-color: #{getPalette($color)};
  @include color(#{var(--sys-palette-color)});
}

@mixin paletteStroke($color) {
  --sys-palette-color: #{getPalette($color)};
  @include stroke(#{var(--sys-palette-color)});
}

@mixin paletteBackground($color) {
  --sys-palette-background: #{getPalette($color)};
  @include backgroundColor(#{var(--sys-palette-background)});
}

@mixin paletteFill($color) {
  --sys-palette-background: #{getPalette($color)};
  @include fill(#{var(--sys-palette-background)});
}

@mixin paletteGradient($color) {
  --sys-palette-gradient: #{getPalette($color)};
  @include gradient(#{var(--sys-palette-gradient)});
}

@mixin paletteBorder($color) {
  --sys-palette-border: #{getPalette($color)};
  @include border(#{var(--sys-palette-border)});
}

/* Color */

@mixin color($color, $opacity: null) {
  @if (isColorRbgOrVar($color)) {
    --sys-color: #{toColorRbg($color)};
    @include colorOpacity($opacity);
    @include colorInit;
  } @else {
    color: $color;
  }
}

@mixin colorOpacity($opacity) {
  @if ($opacity != null) {
    --sys-color-opacity: #{$opacity};
  }
}

@mixin colorInit() {
  color: rgba(var(--sys-color), var(--sys-color-opacity, 1));
}

/* Stroke */

@mixin stroke($color, $opacity: null) {
  @if (isColorRbgOrVar($color)) {
    --sys-color: #{toColorRbg($color)};
    @include strokeOpacity($opacity);
    @include strokeInit;
  } @else {
    stroke: $color;
  }
}

@mixin strokeOpacity($opacity) {
  @if ($opacity != null) {
    --sys-color-opacity: #{$opacity};
  }
}

@mixin strokeInit() {
  stroke: rgba(var(--sys-color), var(--sys-color-opacity, 1));
}

/* Background */

@mixin backgroundColor($color, $opacity: null) {
  @if ($color == 'as-color') {
    @include backgroundAsColor;
  } @else if (isColorRbgOrVar($color)) {
    --sys-background: #{toColorRbg($color)};
    @include backgroundOpacity($opacity);
    @include backgroundInit;
  } @else {
    background-color: $color;
  }
}

@mixin backgroundOpacity($opacity) {
  @if ($opacity != null) {
    --sys-background-opacity: #{$opacity};
  }
}

@mixin backgroundSize($value) {
  background-size: #{$value};
  background-repeat: no-repeat;
}

@mixin backgroundInit() {
  background-color: rgba(var(--sys-background), var(--sys-background-opacity, 1));
}

/* Fill */

@mixin fill($color, $opacity: null) {
  @if (isColorRbgOrVar($color)) {
    --sys-background: #{toColorRbg($color)};
    @include fillOpacity($opacity);
    @include fillInit;
  } @else {
    fill: $color;
  }
}

@mixin fillOpacity($opacity) {
  @if ($opacity != null) {
    --sys-background-opacity: #{$opacity};
  }
}

@mixin fillInit() {
  fill: rgba(var(--sys-background), var(--sys-background-opacity, 1));
}

/* Gradient */

@mixin gradient($color, $opacity: null) {
  @if (isColorRbgOrVar($color)) {
    --sys-gradient: #{toColorRbg($color)};
    @include gradientOpacity($opacity);
    @include gradientInit;
  } @else {
    background-image: $color;
  }
}

@mixin gradientOpacity($opacity) {
  @if ($opacity != null) {
    --sys-gradient-opacity: #{$opacity};
  }
}

@mixin gradientInit() {
  background-image: #{toGradient(#{rgba(var(--sys-gradient), var(--sys-gradient-opacity, 1))})};
}

/* Border */

@mixin border($color, $opacity: null) {
  @if (isColorRbgOrVar($color)) {
    --sys-border: #{toColorRbg($color)};
    @include borderOpacity($opacity);
    @include borderInit;
  } @else {
    border-color: $color;
  }
}

@mixin borderOpacity($opacity) {
  @if ($opacity != null) {
    --sys-border-opacity: #{$opacity};
  }
}

@mixin borderInit() {
  border-color: rgba(var(--sys-border), var(--sys-border-opacity, 1));
}

/* As */

@mixin backgroundAsColor() {
  @include backgroundColor(var(--sys-color), var(--sys-color-opacity));
}
